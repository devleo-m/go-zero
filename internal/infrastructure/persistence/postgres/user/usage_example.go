// internal/infrastructure/persistence/postgres/user/usage_example.go
package user

import (
	"fmt"
	"strings"
	"time"

	"github.com/devleo-m/go-zero/internal/domain/shared"
)

// ExemploUsoRepository demonstra como usar o User Repository
func ExemploUsoRepository() {
	// Simulando contexto e banco
	// ctx := context.Background()
	// db := setupDatabase() // Na pr√°tica seria injetado
	// userRepo := NewRepository(db)

	fmt.Println("üöÄ EXEMPLOS DE USO DO USER REPOSITORY")
	fmt.Println(strings.Repeat("=", 50))

	// ==========================================
	// 1. CRUD B√ÅSICO
	// ==========================================
	fmt.Println("\nüìù 1. CRUD B√ÅSICO")

	// Criar usu√°rio
	fmt.Println("   Criando usu√°rio...")
	// email, _ := user.NewEmail("joao@example.com")
	// password, _ := user.NewPassword("senha123")
	// role := user.RoleUser
	// newUser, _ := user.NewUser("Jo√£o Silva", email, password, role)
	// err := userRepo.Create(ctx, newUser)

	// Buscar por ID
	fmt.Println("   Buscando usu√°rio por ID...")
	// userID := uuid.New()
	// foundUser, err := userRepo.FindByID(ctx, userID)

	// Atualizar usu√°rio
	fmt.Println("   Atualizando usu√°rio...")
	// foundUser.Name = "Jo√£o Silva Santos"
	// err = userRepo.Update(ctx, foundUser.ID, foundUser)

	// Deletar usu√°rio (soft delete)
	fmt.Println("   Deletando usu√°rio...")
	// err = userRepo.Delete(ctx, foundUser.ID)

	// ==========================================
	// 2. QUERY BUILDER - FACILITA MUITO!
	// ==========================================
	fmt.Println("\nüîç 2. QUERY BUILDER")

	// Buscar usu√°rios ativos
	fmt.Println("   Buscando usu√°rios ativos...")
	activeFilter := shared.NewQueryBuilder().
		WhereEqual("status", "active").
		OrderByDesc("created_at").
		Page(1).
		PageSize(20).
		Build()

	// Buscar usu√°rios por role
	fmt.Println("   Buscando usu√°rios por role...")
	adminFilter := shared.NewQueryBuilder().
		WhereEqual("role", "admin").
		WhereEqual("status", "active").
		OrderByAsc("name").
		Build()

	// Buscar usu√°rios criados hoje
	fmt.Println("   Buscando usu√°rios criados hoje...")
	todayFilter := shared.NewQueryBuilder().
		CreatedToday().
		OrderByDesc("created_at").
		Build()

	// Buscar usu√°rios por nome (LIKE)
	fmt.Println("   Buscando usu√°rios por nome...")
	searchFilter := shared.NewQueryBuilder().
		WhereILike("name", "jo√£o").
		WhereEqual("status", "active").
		Build()

	// Buscar usu√°rios com m√∫ltiplas condi√ß√µes
	fmt.Println("   Buscando usu√°rios com m√∫ltiplas condi√ß√µes...")
	complexFilter := shared.NewQueryBuilder().
		WhereEqual("status", "active").
		WhereIn("role", []interface{}{"admin", "manager", "user"}).
		WhereBetween("created_at", time.Now().AddDate(0, -1, 0), time.Now()).
		OrderByDesc("created_at").
		Page(1).
		PageSize(50).
		Build()

	_ = activeFilter
	_ = adminFilter
	_ = todayFilter
	_ = searchFilter
	_ = complexFilter

	// ==========================================
	// 3. SPECIFICATION PATTERN - REUTILIZA√á√ÉO!
	// ==========================================
	fmt.Println("\nüéØ 3. SPECIFICATION PATTERN")

	// Usar especifica√ß√µes reutiliz√°veis
	fmt.Println("   Usando especifica√ß√µes...")
	// activeUsers := shared.ActiveSpecification[user.User]()
	// adminUsers := shared.RoleSpecification[user.User]("admin")
	// activeAdmins := activeUsers.And(adminUsers)

	// Buscar com especifica√ß√µes
	fmt.Println("   Buscando com especifica√ß√µes...")
	// users, err := userRepo.FindMany(ctx, activeAdmins.ToQueryFilter())

	// Combinar especifica√ß√µes
	fmt.Println("   Combinando especifica√ß√µes...")
	// thisWeek := shared.CreatedThisWeekSpecification[user.User]()
	// activeThisWeek := activeUsers.And(thisWeek)
	// users, err = userRepo.FindMany(ctx, activeThisWeek.ToQueryFilter())

	// ==========================================
	// 4. PAGINA√á√ÉO PROFISSIONAL
	// ==========================================
	fmt.Println("\nüìÑ 4. PAGINA√á√ÉO PROFISSIONAL")

	// Buscar com pagina√ß√£o
	fmt.Println("   Buscando com pagina√ß√£o...")
	paginatedFilter := shared.NewQueryBuilder().
		WhereEqual("status", "active").
		OrderByDesc("created_at").
		Page(2).
		PageSize(20).
		Build()

	// result, err := userRepo.Paginate(ctx, paginatedFilter)
	// if err == nil {
	//     fmt.Printf("   P√°gina %d de %d (Total: %d usu√°rios)\n",
	//         result.Pagination.CurrentPage,
	//         result.Pagination.TotalPages,
	//         result.Pagination.TotalItems)
	//     fmt.Printf("   Itens na p√°gina: %d\n", result.Pagination.ItemsInPage)
	//     fmt.Printf("   Tem p√°gina anterior: %v\n", result.Pagination.HasPrevious)
	//     fmt.Printf("   Tem pr√≥xima p√°gina: %v\n", result.Pagination.HasNext)
	// }

	_ = paginatedFilter

	// ==========================================
	// 5. AGREGA√á√ïES E ESTAT√çSTICAS
	// ==========================================
	fmt.Println("\nüìä 5. AGREGA√á√ïES E ESTAT√çSTICAS")

	// Contar usu√°rios
	fmt.Println("   Contando usu√°rios...")
	// count, err := userRepo.Count(ctx, shared.QueryFilter{
	//     Where: []shared.Condition{
	//         {Field: "status", Operator: shared.OpEqual, Value: "active"},
	//     },
	// })

	// Verificar se existe
	fmt.Println("   Verificando se existe...")
	// exists, err := userRepo.Exists(ctx, shared.QueryFilter{
	//     Where: []shared.Condition{
	//         {Field: "email", Operator: shared.OpEqual, Value: "joao@example.com"},
	//     },
	// })

	// Estat√≠sticas completas
	fmt.Println("   Obtendo estat√≠sticas...")
	// stats, err := userRepo.GetUserStats(ctx)
	// if err == nil {
	//     fmt.Printf("   Total de usu√°rios: %d\n", stats.TotalUsers)
	//     fmt.Printf("   Usu√°rios ativos: %d\n", stats.ActiveUsers)
	//     fmt.Printf("   Usu√°rios inativos: %d\n", stats.InactiveUsers)
	//     fmt.Printf("   Usu√°rios pendentes: %d\n", stats.PendingUsers)
	//     fmt.Printf("   Usu√°rios criados hoje: %d\n", stats.UsersCreatedToday)
	// }

	// ==========================================
	// 6. OPERA√á√ïES EM LOTE
	// ==========================================
	fmt.Println("\nüîÑ 6. OPERA√á√ïES EM LOTE")

	// Update em lote
	fmt.Println("   Atualizando usu√°rios em lote...")
	// affected, err := userRepo.UpdateMany(ctx,
	//     shared.QueryFilter{
	//         Where: []shared.Condition{
	//             {Field: "status", Operator: shared.OpEqual, Value: "pending"},
	//         },
	//     },
	//     map[string]interface{}{
	//         "status": "active",
	//     },
	// )
	// fmt.Printf("   %d usu√°rios foram ativados\n", affected)

	// Delete em lote
	fmt.Println("   Deletando usu√°rios em lote...")
	// cutoffDate := time.Now().AddDate(0, -6, 0) // 6 meses atr√°s
	// affected, err = userRepo.DeleteMany(ctx, shared.QueryFilter{
	//     Where: []shared.Condition{
	//         {Field: "created_at", Operator: shared.OpLessThan, Value: cutoffDate},
	//         {Field: "status", Operator: shared.OpEqual, Value: "inactive"},
	//     },
	// })
	// fmt.Printf("   %d usu√°rios foram removidos\n", affected)

	// ==========================================
	// 7. TRANSA√á√ïES
	// ==========================================
	fmt.Println("\nüíº 7. TRANSA√á√ïES")

	// Executar em transa√ß√£o
	fmt.Println("   Executando transa√ß√£o...")
	// err = userRepo.WithTransaction(ctx, func(ctx context.Context) error {
	//     // Criar usu√°rio
	//     // if err := userRepo.Create(ctx, user1); err != nil {
	//     //     return err // Rollback autom√°tico
	//     // }
	//
	//     // Atualizar usu√°rio
	//     // if err := userRepo.Update(ctx, user2.ID, user2); err != nil {
	//     //     return err // Rollback autom√°tico
	//     // }
	//
	//     return nil // Commit autom√°tico
	// })

	// ==========================================
	// 8. QUERIES ESPEC√çFICAS OTIMIZADAS
	// ==========================================
	fmt.Println("\n‚ö° 8. QUERIES ESPEC√çFICAS")

	// Buscar por email (otimizada)
	fmt.Println("   Buscando por email...")
	// user, err := userRepo.FindByEmail(ctx, "joao@example.com")

	// Buscar por telefone (otimizada)
	fmt.Println("   Buscando por telefone...")
	// user, err = userRepo.FindByPhone(ctx, "+5511999999999")

	// Buscar usu√°rios ativos (otimizada)
	fmt.Println("   Buscando usu√°rios ativos...")
	// users, err := userRepo.FindActiveUsers(ctx)

	// Buscar usu√°rios pendentes
	fmt.Println("   Buscando usu√°rios pendentes...")
	// users, err = userRepo.FindPendingActivation(ctx)

	// Buscar por token de reset
	fmt.Println("   Buscando por token de reset...")
	// user, err = userRepo.FindByPasswordResetToken(ctx, "token123")

	// Buscar por token de ativa√ß√£o
	fmt.Println("   Buscando por token de ativa√ß√£o...")
	// user, err = userRepo.FindByActivationToken(ctx, "token456")

	// Buscar usu√°rios sem login
	fmt.Println("   Buscando usu√°rios sem login...")
	// users, err = userRepo.FindUsersWithoutLogin(ctx)

	// Buscar usu√°rios por per√≠odo
	fmt.Println("   Buscando usu√°rios por per√≠odo...")
	// start := time.Now().AddDate(0, -1, 0) // 1 m√™s atr√°s
	// end := time.Now()
	// users, err = userRepo.FindUsersByDateRange(ctx, start, end)

	// Buscar usu√°rios por √∫ltimo login
	fmt.Println("   Buscando usu√°rios por √∫ltimo login...")
	// users, err = userRepo.FindUsersByLastLogin(ctx, 30) // 30 dias

	// Buscar usu√°rios por texto
	fmt.Println("   Buscando usu√°rios por texto...")
	// users, err = userRepo.SearchUsers(ctx, "jo√£o", 10)

	// ==========================================
	// 9. QUERIES AVAN√áADAS
	// ==========================================
	fmt.Println("\nüî¨ 9. QUERIES AVAN√áADAS")

	// Distinct - roles √∫nicos
	fmt.Println("   Buscando roles √∫nicos...")
	// roles, err := userRepo.Distinct(ctx, "role", shared.QueryFilter{})

	// GroupBy - agrupar por role
	fmt.Println("   Agrupando por role...")
	// groups, err := userRepo.GroupBy(ctx, "role", shared.QueryFilter{})

	// FindFirst - primeiro usu√°rio
	fmt.Println("   Buscando primeiro usu√°rio...")
	// firstUser, err := userRepo.FindFirst(ctx, shared.QueryFilter{
	//     OrderBy: []shared.OrderBy{
	//         {Field: "created_at", Order: shared.SortAsc},
	//     },
	// })

	// FindLast - √∫ltimo usu√°rio
	fmt.Println("   Buscando √∫ltimo usu√°rio...")
	// lastUser, err := userRepo.FindLast(ctx, shared.QueryFilter{
	//     OrderBy: []shared.OrderBy{
	//         {Field: "created_at", Order: shared.SortDesc},
	//     },
	// })

	// ==========================================
	// 10. MANUTEN√á√ÉO E LIMPEZA
	// ==========================================
	fmt.Println("\nüßπ 10. MANUTEN√á√ÉO E LIMPEZA")

	// Limpar tokens expirados
	fmt.Println("   Limpando tokens expirados...")
	// affected, err := userRepo.CleanExpiredTokens(ctx)
	// fmt.Printf("   %d tokens foram limpos\n", affected)

	// Buscar tokens expirados
	fmt.Println("   Buscando tokens expirados...")
	// users, err := userRepo.FindExpiredTokens(ctx)

	fmt.Println("\n‚úÖ Exemplos conclu√≠dos com sucesso!")
}

// ExemploComparacaoAntesDepois demonstra a diferen√ßa entre os padr√µes
func ExemploComparacaoAntesDepois() {
	fmt.Println("\n" + strings.Repeat("=", 60))
	fmt.Println("üìä COMPARA√á√ÉO: ANTES vs AGORA")
	fmt.Println(strings.Repeat("=", 60))

	fmt.Println("\n‚ùå ANTES (Repository espec√≠fico):")
	fmt.Println(`
type UserRepository interface {
    FindByEmail(ctx context.Context, email string) (*User, error)
    FindByPhone(ctx context.Context, phone string) (*User, error)
    FindByRole(ctx context.Context, role Role) ([]*User, error)
    FindByStatus(ctx context.Context, status Status) ([]*User, error)
    FindActiveUsers(ctx context.Context) ([]*User, error)
    FindInactiveUsers(ctx context.Context) ([]*User, error)
    FindByCreatedAtBetween(ctx context.Context, start, end time.Time) ([]*User, error)
    FindByRoleIn(ctx context.Context, roles []Role) ([]*User, error)
    FindByNameLike(ctx context.Context, name string) ([]*User, error)
    // ... 50+ m√©todos espec√≠ficos
}`)

	fmt.Println("\n‚úÖ AGORA (Repository gen√©rico + QueryBuilder + Specification):")
	fmt.Println(`
type Repository[T any] interface {
    Create(ctx context.Context, entity T) error
    FindOne(ctx context.Context, filter QueryFilter) (T, error)
    FindMany(ctx context.Context, filter QueryFilter) ([]T, error)
    Update(ctx context.Context, id uuid.UUID, entity T) error
    Delete(ctx context.Context, id uuid.UUID) error
    Paginate(ctx context.Context, filter QueryFilter) (*PaginatedResult[T], error)
    Count(ctx context.Context, filter QueryFilter) (int64, error)
    Exists(ctx context.Context, filter QueryFilter) (bool, error)
    // ... poucos m√©todos poderosos
}

// QueryBuilder - F√°cil e leg√≠vel
filter := NewQueryBuilder().
    WhereEqual("status", "active").
    WhereIn("role", []interface{}{"admin", "user"}).
    OrderByDesc("created_at").
    Page(1).
    PageSize(20).
    Build()

// Specification - Reutiliz√°vel
activeAdmins := ActiveAdminsSpecification[User]()
users, err := repo.FindMany(ctx, activeAdmins.ToQueryFilter())
`)

	fmt.Println("\nüéØ VANTAGENS DO PADR√ÉO ATUAL:")
	fmt.Println("‚úÖ Interface enxuta (10 m√©todos vs 50+)")
	fmt.Println("‚úÖ 100% flex√≠vel (qualquer busca poss√≠vel)")
	fmt.Println("‚úÖ F√°cil de manter")
	fmt.Println("‚úÖ Padr√£o da ind√∫stria")
	fmt.Println("‚úÖ Type-safe com Go Generics")
	fmt.Println("‚úÖ Reutiliz√°vel para TODAS entidades")
	fmt.Println("‚úÖ Pagina√ß√£o profissional inclusa")
	fmt.Println("‚úÖ Agrega√ß√µes poderosas")
	fmt.Println("‚úÖ Transa√ß√µes simples")
	fmt.Println("‚úÖ QueryBuilder facilita uso")
	fmt.Println("‚úÖ Specification reutiliza regras")
	fmt.Println("‚úÖ Performance otimizada com √≠ndices")
	fmt.Println("‚úÖ Convers√µes seguras Domain ‚Üî Model")
	fmt.Println("‚úÖ Hooks GORM para valida√ß√µes")
	fmt.Println("‚úÖ Queries espec√≠ficas otimizadas")
}

func main() {
	ExemploUsoRepository()
	ExemploComparacaoAntesDepois()
}
