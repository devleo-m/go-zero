package main

import "fmt"

// üéØ O que voc√™ vai aprender

// Declara√ß√£o com := (a forma que voc√™ vai usar 90% do tempo)
// Tipos b√°sicos e quando usar cada um
// Zero values (adeus undefined/null!)
// Type inference
// Compara√ß√£o direta: Go vs TypeScript

// 1. Declara√ß√£o de Vari√°veis - A Forma Certa
// TypeScript - 3 formas

// const name: string = "Jo√£o"  // imut√°vel
// let age: number = 25         // mut√°vel
// var old = true               // evitar! (function scope)

// Go - Use := (Short Declaration)

// name := "Jo√£o"    // string (inferido)
// age := 25         // int (inferido)
// active := true    // bool (inferido)
// price := 19.99    // float64 (inferido)

// Pronto! Isso √© 90% do que voc√™ vai usar.

// 2. Formas de Declarar Vari√°veis
// Forma 1: := (Short Declaration) - USE ESTA! ‚úÖ

// Dentro de fun√ß√µes
func exemploVariaveis() {
	name := "Jo√£o"
	age := 25

	// M√∫ltiplas vari√°veis
	x, y := 10, 20

	// Exemplo de fun√ß√£o que retorna m√∫ltiplos valores
	// user, err := getUser(1)  // Comentado pois getUser n√£o existe

	// Usar as vari√°veis para evitar erro de "declared and not used"
	fmt.Printf("Nome: %s, Idade: %d\n", name, age)
	fmt.Printf("x: %d, y: %d\n", x, y)
}

// Quando usar:

// ‚úÖ Dentro de fun√ß√µes (99% dos casos)
// ‚úÖ Quando o tipo √© √≥bvio
// ‚úÖ Vari√°veis locais

// Limita√ß√µes:

// ‚ùå N√ÉO funciona fora de fun√ß√µes (escopo de pacote)

// Forma 2: var com tipo - Use quando necess√°rio

// Fora de fun√ß√µes (escopo de pacote)
var AppName string = "MeuApp"
var Port int = 3000

// func main() {
//     // Ou quando precisa declarar sem inicializar
//     var user User
//     var count int

//     // M√∫ltiplas vari√°veis do mesmo tipo
//     var x, y, z int
// }

// Quando usar:

// ‚úÖ Vari√°veis de pacote (globais)
// ‚úÖ Quando precisa declarar sem valor inicial
// ‚úÖ Quando quer ser MUITO expl√≠cito sobre o tipo

// Forma 3: var com infer√™ncia
// var name = "Jo√£o"    // string inferido
// var age = 25         // int inferido
// Quando usar:

// ‚ö†Ô∏è Raramente! Prefira := dentro de fun√ß√µes
// ‚úÖ Apenas para vari√°veis de pacote quando o tipo √© √≥bvio

// ‚ùå O que N√ÉO fazer
// ‚ùå Redundante
// var name string = "Jo√£o"  // tipo √≥bvio, use :=

// ‚ùå Fora de fun√ß√£o
// name := "Jo√£o"  // ERRO! := s√≥ funciona dentro de fun√ß√µes

// ‚ùå Redeclara√ß√£o
// name := "Jo√£o"
// name := "Maria"  // ERRO! name j√° foi declarado
